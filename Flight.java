package flight;

//import all resources
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import javax.swing.*;

public class Flight extends javax.swing.JFrame{
    
    //DEFINE ALL GLOBAL VARIABLES
    static DefaultTableModel dtm;
    static SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
    static int selectedPlaneObject = -1;
    static long animationSpeed = 1;
    static long totalFastForward = 0;
    static String log = "";
    
    //all current flights data, as well as airport coordinate locations
    public static ArrayList<Plane> planes = new ArrayList<Plane>();
    public static ArrayList<Plane> futurePlanes = new ArrayList<Plane>();
    public static int[][] airports = new int[][]{
        {240, 370, 770, 560, 790, 830, 990},
        {540, 510, 270, 600, 690, 650, 590}
    };
    JButton[] seats;
    
    
    public Flight() {
        initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        passengerDialog = new javax.swing.JDialog();
        dialogTitle = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        idLabel = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        ageLabel = new javax.swing.JLabel();
        countryLabel = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        passengerIdIn = new javax.swing.JTextField();
        passengerNameIn = new javax.swing.JTextField();
        passengerAgeIn = new javax.swing.JTextField();
        passengerCountryIn = new javax.swing.JTextField();
        bookPassengerButton = new javax.swing.JButton();
        flightDialog = new javax.swing.JDialog();
        titl = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        IdDialog = new javax.swing.JTextField();
        depLocDialog = new javax.swing.JComboBox<>();
        arrLocDialog = new javax.swing.JComboBox<>();
        bookFlightDialog = new javax.swing.JButton();
        homePanel = new javax.swing.JPanel();
        welcome = new javax.swing.JPanel();
        logo = new javax.swing.JLabel();
        homeInfo = new javax.swing.JLabel();
        loadButton = new javax.swing.JButton();
        wallpaper = new javax.swing.JLabel();
        openingScreen = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        planeGraphic = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        manageButton = new javax.swing.JButton();
        currentFlights = new javax.swing.JPanel();
        currentTitle = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        currentFlightsTable = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        currentPlane1 = new javax.swing.JButton();
        currentPlane2 = new javax.swing.JButton();
        currentPlane3 = new javax.swing.JButton();
        currentPlane4 = new javax.swing.JButton();
        currentPlane5 = new javax.swing.JButton();
        p1 = new javax.swing.JLabel();
        p2 = new javax.swing.JLabel();
        p3 = new javax.swing.JLabel();
        p4 = new javax.swing.JLabel();
        p5 = new javax.swing.JLabel();
        clockLabel = new javax.swing.JLabel();
        speedPanel = new javax.swing.JPanel();
        speed1 = new javax.swing.JButton();
        speed2 = new javax.swing.JButton();
        speed3 = new javax.swing.JButton();
        mapPicture = new javax.swing.JLabel();
        manage = new javax.swing.JPanel();
        title = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        currentFlightsBooking = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        futureFlightsBooking = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        backToRadar = new javax.swing.JButton();
        bookPassenger = new javax.swing.JButton();
        bookFlight = new javax.swing.JButton();
        planeInfo = new javax.swing.JPanel();
        seatRow1 = new javax.swing.JPanel();
        seat1 = new javax.swing.JButton();
        seat2 = new javax.swing.JButton();
        seat3 = new javax.swing.JButton();
        seat4 = new javax.swing.JButton();
        seat5 = new javax.swing.JButton();
        seat6 = new javax.swing.JButton();
        seat7 = new javax.swing.JButton();
        seat8 = new javax.swing.JButton();
        seat9 = new javax.swing.JButton();
        seat10 = new javax.swing.JButton();
        seatRow2 = new javax.swing.JPanel();
        seat11 = new javax.swing.JButton();
        seat12 = new javax.swing.JButton();
        seat13 = new javax.swing.JButton();
        seat14 = new javax.swing.JButton();
        seat15 = new javax.swing.JButton();
        seat16 = new javax.swing.JButton();
        seat17 = new javax.swing.JButton();
        seat18 = new javax.swing.JButton();
        seat19 = new javax.swing.JButton();
        seat20 = new javax.swing.JButton();
        passengerInfo = new javax.swing.JPanel();
        passengerTitle = new javax.swing.JLabel();
        passengerDisplay = new javax.swing.JPanel();
        labelName = new javax.swing.JLabel();
        passengerNameOut = new javax.swing.JTextField();
        labelAge = new javax.swing.JLabel();
        passengerAgeOut = new javax.swing.JTextField();
        labelCountry = new javax.swing.JLabel();
        passengerCountryOut = new javax.swing.JTextField();
        returnToRadar = new javax.swing.JButton();
        planeSeatsImage = new javax.swing.JLabel();

        passengerDialog.setAlwaysOnTop(true);
        passengerDialog.setBounds(new java.awt.Rectangle(500, 200, 440, 300));
        passengerDialog.setLocation(new java.awt.Point(500, 200));
        passengerDialog.setResizable(false);

        dialogTitle.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        dialogTitle.setText("Book New Passenger");

        jPanel2.setLayout(new java.awt.GridLayout(4, 1));

        idLabel.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        idLabel.setText("Enter Plane ID #");
        jPanel2.add(idLabel);

        nameLabel.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        nameLabel.setText("Enter Passenger Name:");
        jPanel2.add(nameLabel);

        ageLabel.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        ageLabel.setText("Enter Age of Passenger:");
        jPanel2.add(ageLabel);

        countryLabel.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        countryLabel.setText("Enter Country of Residence:");
        jPanel2.add(countryLabel);

        jPanel3.setLayout(new java.awt.GridLayout(4, 1, 0, 3));
        jPanel3.add(passengerIdIn);
        jPanel3.add(passengerNameIn);
        jPanel3.add(passengerAgeIn);
        jPanel3.add(passengerCountryIn);

        bookPassengerButton.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        bookPassengerButton.setText("Book Passenger");
        bookPassengerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookPassengerButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout passengerDialogLayout = new javax.swing.GroupLayout(passengerDialog.getContentPane());
        passengerDialog.getContentPane().setLayout(passengerDialogLayout);
        passengerDialogLayout.setHorizontalGroup(
            passengerDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(passengerDialogLayout.createSequentialGroup()
                .addGroup(passengerDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(passengerDialogLayout.createSequentialGroup()
                        .addGap(130, 130, 130)
                        .addComponent(dialogTitle))
                    .addGroup(passengerDialogLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(passengerDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bookPassengerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(passengerDialogLayout.createSequentialGroup()
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        passengerDialogLayout.setVerticalGroup(
            passengerDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(passengerDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(dialogTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(passengerDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bookPassengerButton, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE)
                .addContainerGap())
        );

        flightDialog.setAlwaysOnTop(true);
        flightDialog.setLocation(new java.awt.Point(450, 200));
        flightDialog.setResizable(false);
        flightDialog.setSize(new java.awt.Dimension(380, 255));

        titl.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        titl.setText("Book New Flight");

        jPanel5.setLayout(new java.awt.GridLayout(3, 1));

        jLabel9.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        jLabel9.setText("Enter Plane ID #:");
        jPanel5.add(jLabel9);

        jLabel11.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        jLabel11.setText("Enter Departure Location:");
        jPanel5.add(jLabel11);

        jLabel12.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        jLabel12.setText("Enter Arrival Location:");
        jPanel5.add(jLabel12);

        jPanel6.setLayout(new java.awt.GridLayout(3, 1));
        jPanel6.add(IdDialog);

        depLocDialog.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Vancouver", "Edmonton", "Iqualuit", "Winnipeg", "Toronto", "Ottawa", "Halifax" }));
        jPanel6.add(depLocDialog);

        arrLocDialog.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Vancouver", "Edmonton", "Iqualuit", "Winnipeg", "Toronto", "Ottawa", "Halifax" }));
        arrLocDialog.setSelectedIndex(1);
        jPanel6.add(arrLocDialog);

        bookFlightDialog.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        bookFlightDialog.setText("Book Flight");
        bookFlightDialog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookFlightDialogActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout flightDialogLayout = new javax.swing.GroupLayout(flightDialog.getContentPane());
        flightDialog.getContentPane().setLayout(flightDialogLayout);
        flightDialogLayout.setHorizontalGroup(
            flightDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(flightDialogLayout.createSequentialGroup()
                .addGroup(flightDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(flightDialogLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE))
                    .addGroup(flightDialogLayout.createSequentialGroup()
                        .addGroup(flightDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(flightDialogLayout.createSequentialGroup()
                                .addGap(124, 124, 124)
                                .addComponent(titl))
                            .addGroup(flightDialogLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(bookFlightDialog, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        flightDialogLayout.setVerticalGroup(
            flightDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(flightDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(flightDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bookFlightDialog, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1300, 790));
        setSize(new java.awt.Dimension(1300, 790));

        homePanel.setLayout(new java.awt.CardLayout());

        welcome.setLayout(null);

        logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/flight/homeLogo.png"))); // NOI18N
        welcome.add(logo);
        logo.setBounds(200, 213, 900, 202);

        homeInfo.setText("Aviation Systems v1.0 - Branden Lisk");
        welcome.add(homeInfo);
        homeInfo.setBounds(1065, 752, 235, 16);

        loadButton.setFont(new java.awt.Font("Lucida Grande", 0, 22)); // NOI18N
        loadButton.setText("Load Program");
        loadButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        loadButton.setContentAreaFilled(false);
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });
        welcome.add(loadButton);
        loadButton.setBounds(460, 480, 377, 66);

        wallpaper.setIcon(new javax.swing.ImageIcon(getClass().getResource("/flight/wallpaper.jpg"))); // NOI18N
        welcome.add(wallpaper);
        wallpaper.setBounds(0, 0, 1300, 770);

        homePanel.add(welcome, "card4");

        openingScreen.setLayout(null);

        planeGraphic.setLayout(new java.awt.GridLayout(2, 3));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/flight/plane.png"))); // NOI18N
        planeGraphic.add(jLabel1);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/flight/plane.png"))); // NOI18N
        planeGraphic.add(jLabel2);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/flight/plane.png"))); // NOI18N
        planeGraphic.add(jLabel3);

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/flight/plane.png"))); // NOI18N
        planeGraphic.add(jLabel4);

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/flight/plane.png"))); // NOI18N
        planeGraphic.add(jLabel5);

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/flight/plane.png"))); // NOI18N
        planeGraphic.add(jLabel6);

        manageButton.setFont(new java.awt.Font("Avenir Next", 0, 17)); // NOI18N
        manageButton.setText("Manage Flights");
        manageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(planeGraphic, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(manageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(9, Short.MAX_VALUE)
                .addComponent(manageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(planeGraphic, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        openingScreen.add(jPanel1);
        jPanel1.setBounds(20, 580, 190, 160);

        currentTitle.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        currentTitle.setText("Current Flights");

        currentFlightsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Plane ID #"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        currentFlightsTable.setRowHeight(35);
        jScrollPane3.setViewportView(currentFlightsTable);

        jPanel4.setLayout(new java.awt.GridLayout(5, 1));

        currentPlane1.setFont(new java.awt.Font("Avenir Next", 0, 14)); // NOI18N
        currentPlane1.setText("See Info");
        currentPlane1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                currentPlane1ActionPerformed(evt);
            }
        });
        jPanel4.add(currentPlane1);

        currentPlane2.setFont(new java.awt.Font("Avenir Next", 0, 14)); // NOI18N
        currentPlane2.setText("See Info");
        currentPlane2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                currentPlane2ActionPerformed(evt);
            }
        });
        jPanel4.add(currentPlane2);

        currentPlane3.setFont(new java.awt.Font("Avenir Next", 0, 14)); // NOI18N
        currentPlane3.setText("See Info");
        currentPlane3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                currentPlane3ActionPerformed(evt);
            }
        });
        jPanel4.add(currentPlane3);

        currentPlane4.setFont(new java.awt.Font("Avenir Next", 0, 14)); // NOI18N
        currentPlane4.setText("See Info");
        currentPlane4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                currentPlane4ActionPerformed(evt);
            }
        });
        jPanel4.add(currentPlane4);

        currentPlane5.setFont(new java.awt.Font("Avenir Next", 0, 14)); // NOI18N
        currentPlane5.setText("See Info");
        currentPlane5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                currentPlane5ActionPerformed(evt);
            }
        });
        jPanel4.add(currentPlane5);

        javax.swing.GroupLayout currentFlightsLayout = new javax.swing.GroupLayout(currentFlights);
        currentFlights.setLayout(currentFlightsLayout);
        currentFlightsLayout.setHorizontalGroup(
            currentFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(currentFlightsLayout.createSequentialGroup()
                .addGroup(currentFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(currentFlightsLayout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addComponent(currentTitle)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(currentFlightsLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)))
                .addContainerGap())
        );
        currentFlightsLayout.setVerticalGroup(
            currentFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(currentFlightsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(currentTitle)
                .addGroup(currentFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(currentFlightsLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, currentFlightsLayout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(8, Short.MAX_VALUE))
        );

        openingScreen.add(currentFlights);
        currentFlights.setBounds(960, 30, 240, 250);

        p1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/flight/plane.png"))); // NOI18N
        openingScreen.add(p1);
        p1.setBounds(240, 540, 40, 40);

        p2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/flight/plane.png"))); // NOI18N
        openingScreen.add(p2);
        p2.setBounds(50, 170, 40, 50);

        p3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/flight/plane.png"))); // NOI18N
        openingScreen.add(p3);
        p3.setBounds(50, 230, 40, 50);

        p4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/flight/plane.png"))); // NOI18N
        openingScreen.add(p4);
        p4.setBounds(100, 330, 40, 40);

        p5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/flight/plane.png"))); // NOI18N
        openingScreen.add(p5);
        p5.setBounds(10, 390, 40, 40);

        clockLabel.setFont(new java.awt.Font("Sinhala Sangam MN", 0, 19)); // NOI18N
        clockLabel.setText("21:45:16");
        openingScreen.add(clockLabel);
        clockLabel.setBounds(20, 10, 130, 40);

        speedPanel.setBackground(new java.awt.Color(255, 255, 255));
        speedPanel.setLayout(new java.awt.GridLayout(1, 3, 10, 0));

        speed1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/flight/play.png"))); // NOI18N
        speed1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                speed1ActionPerformed(evt);
            }
        });
        speedPanel.add(speed1);

        speed2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/flight/forward.png"))); // NOI18N
        speed2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                speed2ActionPerformed(evt);
            }
        });
        speedPanel.add(speed2);

        speed3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/flight/fastForward.png"))); // NOI18N
        speed3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                speed3ActionPerformed(evt);
            }
        });
        speedPanel.add(speed3);

        openingScreen.add(speedPanel);
        speedPanel.setBounds(20, 60, 170, 40);

        mapPicture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/flight/map.jpg"))); // NOI18N
        openingScreen.add(mapPicture);
        mapPicture.setBounds(0, 0, 1300, 771);

        homePanel.add(openingScreen, "card1");

        title.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        title.setText("Manage Flights");

        currentFlightsBooking.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Plane ID #", "Departure Location", "Departure Time", "Arrival Location", "Arrival Time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        currentFlightsBooking.setRowHeight(45);
        currentFlightsBooking.setRowMargin(5);
        jScrollPane1.setViewportView(currentFlightsBooking);

        jLabel7.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        jLabel7.setText("Current Flights");

        futureFlightsBooking.setModel(dtm = new javax.swing.table.DefaultTableModel(
            null,
            new String[]{
                "Plane ID #", "Departure Location", "Departure Time", "Arrival Location", "Arrival Time"
            }
        ) {
            boolean[] canEdit2 = new boolean[]{
                false, false, false, false, false
            };

            public boolean isCellEditable2(int rowIndex2, int columnIndex2){
                return canEdit2 [columnIndex2];
            }
        });
        futureFlightsBooking.setRowHeight(30);
        jScrollPane2.setViewportView(futureFlightsBooking);

        jLabel8.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        jLabel8.setText("Future Flights");

        backToRadar.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        backToRadar.setText("Back to Radar");
        backToRadar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backToRadarActionPerformed(evt);
            }
        });

        bookPassenger.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        bookPassenger.setText("Book New Passenger on Flight");
        bookPassenger.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookPassengerActionPerformed(evt);
            }
        });

        bookFlight.setText("Book New Flight");
        bookFlight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookFlightActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout manageLayout = new javax.swing.GroupLayout(manage);
        manage.setLayout(manageLayout);
        manageLayout.setHorizontalGroup(
            manageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageLayout.createSequentialGroup()
                .addGap(576, 576, 576)
                .addComponent(title)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, manageLayout.createSequentialGroup()
                .addGroup(manageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(manageLayout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(backToRadar, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bookFlight)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bookPassenger, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(manageLayout.createSequentialGroup()
                        .addContainerGap(25, Short.MAX_VALUE)
                        .addGroup(manageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1263, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(manageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel7)
                                .addComponent(jLabel8)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1263, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(18, 18, 18))
        );
        manageLayout.setVerticalGroup(
            manageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(68, 68, 68)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(manageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backToRadar, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bookPassenger, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bookFlight, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        homePanel.add(manage, "card2");

        planeInfo.setLayout(null);

        seatRow1.setBackground(new java.awt.Color(255, 255, 255));
        seatRow1.setLayout(new java.awt.GridLayout(2, 5, 35, 0));

        seat1.setText("1");
        seat1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seat1ActionPerformed(evt);
            }
        });
        seatRow1.add(seat1);

        seat2.setText("2");
        seat2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seat2ActionPerformed(evt);
            }
        });
        seatRow1.add(seat2);

        seat3.setText("3");
        seat3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seat3ActionPerformed(evt);
            }
        });
        seatRow1.add(seat3);

        seat4.setText("4");
        seat4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seat4ActionPerformed(evt);
            }
        });
        seatRow1.add(seat4);

        seat5.setText("5");
        seat5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seat5ActionPerformed(evt);
            }
        });
        seatRow1.add(seat5);

        seat6.setText("6");
        seat6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seat6ActionPerformed(evt);
            }
        });
        seatRow1.add(seat6);

        seat7.setText("7");
        seat7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seat7ActionPerformed(evt);
            }
        });
        seatRow1.add(seat7);

        seat8.setText("8");
        seat8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seat8ActionPerformed(evt);
            }
        });
        seatRow1.add(seat8);

        seat9.setText("9");
        seat9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seat9ActionPerformed(evt);
            }
        });
        seatRow1.add(seat9);

        seat10.setText("10");
        seat10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seat10ActionPerformed(evt);
            }
        });
        seatRow1.add(seat10);

        planeInfo.add(seatRow1);
        seatRow1.setBounds(560, 220, 540, 130);

        seatRow2.setBackground(new java.awt.Color(255, 255, 255));
        seatRow2.setLayout(new java.awt.GridLayout(2, 5, 35, 0));

        seat11.setText("11");
        seat11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seat11ActionPerformed(evt);
            }
        });
        seatRow2.add(seat11);

        seat12.setText("12");
        seat12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seat12ActionPerformed(evt);
            }
        });
        seatRow2.add(seat12);

        seat13.setText("13");
        seat13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seat13ActionPerformed(evt);
            }
        });
        seatRow2.add(seat13);

        seat14.setText("14");
        seat14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seat14ActionPerformed(evt);
            }
        });
        seatRow2.add(seat14);

        seat15.setText("15");
        seat15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seat15ActionPerformed(evt);
            }
        });
        seatRow2.add(seat15);

        seat16.setText("16");
        seat16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seat16ActionPerformed(evt);
            }
        });
        seatRow2.add(seat16);

        seat17.setText("17");
        seat17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seat17ActionPerformed(evt);
            }
        });
        seatRow2.add(seat17);

        seat18.setText("18");
        seat18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seat18ActionPerformed(evt);
            }
        });
        seatRow2.add(seat18);

        seat19.setText("19");
        seat19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seat19ActionPerformed(evt);
            }
        });
        seatRow2.add(seat19);

        seat20.setText("20");
        seat20.setToolTipText("");
        seat20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seat20ActionPerformed(evt);
            }
        });
        seatRow2.add(seat20);

        planeInfo.add(seatRow2);
        seatRow2.setBounds(560, 420, 540, 130);

        passengerTitle.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        passengerTitle.setText("Passenger Information");

        labelName.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        labelName.setText("Name:");

        passengerNameOut.setEditable(false);

        labelAge.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        labelAge.setText("Age:");

        passengerAgeOut.setEditable(false);

        labelCountry.setText("Country of Residence:");

        passengerCountryOut.setEditable(false);

        javax.swing.GroupLayout passengerDisplayLayout = new javax.swing.GroupLayout(passengerDisplay);
        passengerDisplay.setLayout(passengerDisplayLayout);
        passengerDisplayLayout.setHorizontalGroup(
            passengerDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(passengerDisplayLayout.createSequentialGroup()
                .addComponent(labelCountry)
                .addGap(18, 18, 18)
                .addComponent(passengerCountryOut, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE))
            .addGroup(passengerDisplayLayout.createSequentialGroup()
                .addGroup(passengerDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelName)
                    .addComponent(labelAge))
                .addGap(18, 18, 18)
                .addGroup(passengerDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(passengerAgeOut)
                    .addComponent(passengerNameOut)))
        );
        passengerDisplayLayout.setVerticalGroup(
            passengerDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(passengerDisplayLayout.createSequentialGroup()
                .addGroup(passengerDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelName, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passengerNameOut, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(passengerDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelAge, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passengerAgeOut, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(passengerDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelCountry, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passengerCountryOut, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout passengerInfoLayout = new javax.swing.GroupLayout(passengerInfo);
        passengerInfo.setLayout(passengerInfoLayout);
        passengerInfoLayout.setHorizontalGroup(
            passengerInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(passengerInfoLayout.createSequentialGroup()
                .addGap(88, 88, 88)
                .addComponent(passengerTitle)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, passengerInfoLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(passengerDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        passengerInfoLayout.setVerticalGroup(
            passengerInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(passengerInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(passengerTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(passengerDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        planeInfo.add(passengerInfo);
        passengerInfo.setBounds(30, 20, 330, 150);

        returnToRadar.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        returnToRadar.setText("Back To Radar");
        returnToRadar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnToRadarActionPerformed(evt);
            }
        });
        planeInfo.add(returnToRadar);
        returnToRadar.setBounds(20, 710, 160, 40);

        planeSeatsImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/flight/seat layout.jpg"))); // NOI18N
        planeInfo.add(planeSeatsImage);
        planeSeatsImage.setBounds(0, 0, 1310, 770);

        homePanel.add(planeInfo, "card3");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(homePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(homePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //When the mange flights buttons is pressed, show the correct card, log the action
    private void manageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageButtonActionPerformed
        CardLayout cl = (CardLayout) (homePanel.getLayout());
        cl.show(homePanel, "card2");
        
        log = log + sdf.format(new Date(System.currentTimeMillis())) + " Manage Button Pressed \n";
    }//GEN-LAST:event_manageButtonActionPerformed

    //When the load program button is pressed
    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        //show the home layout card
        CardLayout cl = (CardLayout) (homePanel.getLayout());
        cl.show(homePanel, "card1");
        
        AnimatePlanes thread = new AnimatePlanes(); //start animating thread
        thread.setDaemon(true);
        thread.start();
        
        Clock clock = new Clock(); //start clock thread
        clock.setDaemon(true);
        clock.start();
        
        refreshTables(); //load the tables with the data
        initialSetPosition(); //set the initial positions of the planes
        
        //initialize the array of seat buttons (to be used later in the program)
        seats = new JButton[]{seat1, seat2, seat3, seat4, seat5, seat6, seat7, seat8, seat9, seat10, seat11, seat12, seat13, seat14, seat15, seat16, seat17, seat18, seat19, seat20};
        
    }//GEN-LAST:event_loadButtonActionPerformed

    //when back to radar button is pressed, show the correct card, log the action
    private void backToRadarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backToRadarActionPerformed
        CardLayout cl = (CardLayout) (homePanel.getLayout());
        cl.show(homePanel, "card1");
        
        log = log + sdf.format(new Date(System.currentTimeMillis())) + " Back to Radar Button Pressed \n";
    }//GEN-LAST:event_backToRadarActionPerformed

    //when the book passenger button is pressed, show the dialog
    private void bookPassengerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookPassengerActionPerformed
        passengerDialog.setVisible(true);
    }//GEN-LAST:event_bookPassengerActionPerformed

    //when the final book passenger button is pressed, get the required passnger information and store it within that plane object
    private void bookPassengerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookPassengerButtonActionPerformed
        String ID = passengerIdIn.getText(); //get all data from input boxes
        String name = passengerNameIn.getText();
        String age = passengerAgeIn.getText();
        String country = passengerCountryIn.getText();
        
        int planeIndex = -1;
        //Test if the index exists
        for (int i = 0; i < futurePlanes.size(); i++){
            String testID = futurePlanes.get(i).ID;
            if (testID.equals(ID)){
                planeIndex = i;
            }
        }
        
        if (planeIndex >= 0){ //if index exists:
            //get the passenger and seating arrays from the required plane object
            Passenger[] tempPassengers = planes.get(planeIndex).passengerArray;
            int[] tempSeating = planes.get(planeIndex).seatingBooked;
            
            int counter = 0; //test if seating is fully booked for that plane
            for (int i = 0; i < tempSeating.length; i++){
                if(tempSeating[i] == 1){
                    counter++;
                }
            }
            
            if (counter == 20){ //if fully booked, tell the user, log the action
                passengerIdIn.setText("Plane is Fully Booked");
                log = log + sdf.format(new Date(System.currentTimeMillis())) + " Passenger Unsucessfully Booked \n";
            } else{ //if an empty seat is available:
                Passenger newPassenger = new Passenger(name, age, country); //create a new passenger object
                //find an empty seat, set the seat to that passenger, end loop
                for (int i = 0; i < 20; i++){
                    if (tempSeating[i] == 0){
                        tempPassengers[i] = newPassenger;
                        tempSeating[i] = 1;
                        i = 20;
                    }
                }

                //set the arrays to the new arrays, clear input boxes
                futurePlanes.get(planeIndex).setPassengerArray(tempPassengers);
                futurePlanes.get(planeIndex).setSeatingBooked(tempSeating);
                passengerDialog.setVisible(false);
                passengerIdIn.setText("");
                passengerNameIn.setText("");
                passengerAgeIn.setText("");
                passengerCountryIn.setText("");
                
                log = log + sdf.format(new Date(System.currentTimeMillis())) + " Passenger Successfully Booked \n"; //log the action
            }
        } else{ //if id is not found, tell the user, log the action
            passengerIdIn.setText("Enter Valid ID");
            log = log + sdf.format(new Date(System.currentTimeMillis())) + " Passenger Unsuccessfully Booked \n";
        }
    }//GEN-LAST:event_bookPassengerButtonActionPerformed

    // <editor-fold defaultstate="collapsed" desc="Select Plane and Seat buttons ACTION PERFORMED">
    //if info button about a plane is pressed:
    private void currentPlane1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currentPlane1ActionPerformed
        selectedPlaneObject = 0; //set the selected plane object
        CardLayout cl = (CardLayout) (homePanel.getLayout()); //show the correct card
        cl.show(homePanel, "card3");
        //get the seats that are booked, set the correct colours
        int[] seatsBooked = planes.get(selectedPlaneObject).seatingBooked;
        for (int i = 0; i < seatsBooked.length; i++){
            if (seatsBooked[i] == 1){
                seats[i].setBackground(Color.red);
            } else{
                seats[i].setBackground(Color.green);
            }
        }
    }//GEN-LAST:event_currentPlane1ActionPerformed

    private void currentPlane2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currentPlane2ActionPerformed
        selectedPlaneObject = 1;
        CardLayout cl = (CardLayout) (homePanel.getLayout());
        cl.show(homePanel, "card3");
        int[] seatsBooked = planes.get(selectedPlaneObject).seatingBooked;
        for (int i = 0; i < seatsBooked.length; i++){
            if (seatsBooked[i] == 1){
                seats[i].setBackground(Color.red);
            } else{
                seats[i].setBackground(Color.green);
            }
        }
    }//GEN-LAST:event_currentPlane2ActionPerformed

    private void currentPlane3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currentPlane3ActionPerformed
        selectedPlaneObject = 2;
        CardLayout cl = (CardLayout) (homePanel.getLayout());
        cl.show(homePanel, "card3");
        int[] seatsBooked = planes.get(selectedPlaneObject).seatingBooked;
        for (int i = 0; i < seatsBooked.length; i++){
            if (seatsBooked[i] == 1){
                seats[i].setBackground(Color.red);
            } else{
                seats[i].setBackground(Color.green);
            }
        }
    }//GEN-LAST:event_currentPlane3ActionPerformed

    private void currentPlane4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currentPlane4ActionPerformed
        selectedPlaneObject = 3;
        CardLayout cl = (CardLayout) (homePanel.getLayout());
        cl.show(homePanel, "card3");
        int[] seatsBooked = planes.get(selectedPlaneObject).seatingBooked;
        for (int i = 0; i < seatsBooked.length; i++){
            if (seatsBooked[i] == 1){
                seats[i].setBackground(Color.red);
            } else{
                seats[i].setBackground(Color.green);
            }
        }
    }//GEN-LAST:event_currentPlane4ActionPerformed

    private void currentPlane5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currentPlane5ActionPerformed
        selectedPlaneObject = 4;
        CardLayout cl = (CardLayout) (homePanel.getLayout());
        cl.show(homePanel, "card3");
        int[] seatsBooked = planes.get(selectedPlaneObject).seatingBooked;
        for (int i = 0; i < seatsBooked.length; i++){
            if (seatsBooked[i] == 1){
                seats[i].setBackground(Color.red);
            } else{
                seats[i].setBackground(Color.green);
            }
        }
    }//GEN-LAST:event_currentPlane5ActionPerformed

    //get the seat that was clicked:
    private void seat1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seat1ActionPerformed
        //display the correct passenger infornation according to the seat on the plane
        int num = 0;
        try{
            passengerNameOut.setText(planes.get(selectedPlaneObject).passengerArray[num].name);
            passengerAgeOut.setText(planes.get(selectedPlaneObject).passengerArray[num].age);
            passengerCountryOut.setText(planes.get(selectedPlaneObject).passengerArray[num].country);
        } catch (NullPointerException e){ //if no passenger, display this information
            passengerNameOut.setText("No Passenger Booked");
            passengerAgeOut.setText("");
            passengerCountryOut.setText("");
        }
    }//GEN-LAST:event_seat1ActionPerformed

    private void seat2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seat2ActionPerformed
        int num = 1;
        try{
            passengerNameOut.setText(planes.get(selectedPlaneObject).passengerArray[num].name);
            passengerAgeOut.setText(planes.get(selectedPlaneObject).passengerArray[num].age);
            passengerCountryOut.setText(planes.get(selectedPlaneObject).passengerArray[num].country);
        } catch (NullPointerException e){
            passengerNameOut.setText("No Passenger Booked");
            passengerAgeOut.setText("");
            passengerCountryOut.setText("");
        }
    }//GEN-LAST:event_seat2ActionPerformed

    private void seat3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seat3ActionPerformed
        int num = 2;
        try{
            passengerNameOut.setText(planes.get(selectedPlaneObject).passengerArray[num].name);
            passengerAgeOut.setText(planes.get(selectedPlaneObject).passengerArray[num].age);
            passengerCountryOut.setText(planes.get(selectedPlaneObject).passengerArray[num].country);
        } catch (NullPointerException e){
            passengerNameOut.setText("No Passenger Booked");
            passengerAgeOut.setText("");
            passengerCountryOut.setText("");
        }
    }//GEN-LAST:event_seat3ActionPerformed

    private void seat4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seat4ActionPerformed
        int num = 3;
        try{
            passengerNameOut.setText(planes.get(selectedPlaneObject).passengerArray[num].name);
            passengerAgeOut.setText(planes.get(selectedPlaneObject).passengerArray[num].age);
            passengerCountryOut.setText(planes.get(selectedPlaneObject).passengerArray[num].country);
        } catch (NullPointerException e){
            passengerNameOut.setText("No Passenger Booked");
            passengerAgeOut.setText("");
            passengerCountryOut.setText("");
        }
    }//GEN-LAST:event_seat4ActionPerformed

    private void seat5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seat5ActionPerformed
        int num = 4;
        try{
            passengerNameOut.setText(planes.get(selectedPlaneObject).passengerArray[num].name);
            passengerAgeOut.setText(planes.get(selectedPlaneObject).passengerArray[num].age);
            passengerCountryOut.setText(planes.get(selectedPlaneObject).passengerArray[num].country);
        } catch (NullPointerException e){
            passengerNameOut.setText("No Passenger Booked");
            passengerAgeOut.setText("");
            passengerCountryOut.setText("");
        }
    }//GEN-LAST:event_seat5ActionPerformed

    private void seat6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seat6ActionPerformed
        int num = 5;
        try{
            passengerNameOut.setText(planes.get(selectedPlaneObject).passengerArray[num].name);
            passengerAgeOut.setText(planes.get(selectedPlaneObject).passengerArray[num].age);
            passengerCountryOut.setText(planes.get(selectedPlaneObject).passengerArray[num].country);
        } catch (NullPointerException e){
            passengerNameOut.setText("No Passenger Booked");
            passengerAgeOut.setText("");
            passengerCountryOut.setText("");
        }
    }//GEN-LAST:event_seat6ActionPerformed

    private void seat7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seat7ActionPerformed
        int num = 6;
        try{
            passengerNameOut.setText(planes.get(selectedPlaneObject).passengerArray[num].name);
            passengerAgeOut.setText(planes.get(selectedPlaneObject).passengerArray[num].age);
            passengerCountryOut.setText(planes.get(selectedPlaneObject).passengerArray[num].country);
        } catch (NullPointerException e){
            passengerNameOut.setText("No Passenger Booked");
            passengerAgeOut.setText("");
            passengerCountryOut.setText("");
        }
    }//GEN-LAST:event_seat7ActionPerformed

    private void seat8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seat8ActionPerformed
        int num = 7;
        try{
            passengerNameOut.setText(planes.get(selectedPlaneObject).passengerArray[num].name);
            passengerAgeOut.setText(planes.get(selectedPlaneObject).passengerArray[num].age);
            passengerCountryOut.setText(planes.get(selectedPlaneObject).passengerArray[num].country);
        } catch (NullPointerException e){
            passengerNameOut.setText("No Passenger Booked");
            passengerAgeOut.setText("");
            passengerCountryOut.setText("");
        }
    }//GEN-LAST:event_seat8ActionPerformed

    private void seat9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seat9ActionPerformed
        int num = 8;
        try{
            passengerNameOut.setText(planes.get(selectedPlaneObject).passengerArray[num].name);
            passengerAgeOut.setText(planes.get(selectedPlaneObject).passengerArray[num].age);
            passengerCountryOut.setText(planes.get(selectedPlaneObject).passengerArray[num].country);
        } catch (NullPointerException e){
            passengerNameOut.setText("No Passenger Booked");
            passengerAgeOut.setText("");
            passengerCountryOut.setText("");
        }
    }//GEN-LAST:event_seat9ActionPerformed

    private void seat10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seat10ActionPerformed
        int num = 9;
        try{
            passengerNameOut.setText(planes.get(selectedPlaneObject).passengerArray[num].name);
            passengerAgeOut.setText(planes.get(selectedPlaneObject).passengerArray[num].age);
            passengerCountryOut.setText(planes.get(selectedPlaneObject).passengerArray[num].country);
        } catch (NullPointerException e){
            passengerNameOut.setText("No Passenger Booked");
            passengerAgeOut.setText("");
            passengerCountryOut.setText("");
        }
    }//GEN-LAST:event_seat10ActionPerformed

    private void seat11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seat11ActionPerformed
        int num = 10;
        try{
            passengerNameOut.setText(planes.get(selectedPlaneObject).passengerArray[num].name);
            passengerAgeOut.setText(planes.get(selectedPlaneObject).passengerArray[num].age);
            passengerCountryOut.setText(planes.get(selectedPlaneObject).passengerArray[num].country);
        } catch (NullPointerException e){
            passengerNameOut.setText("No Passenger Booked");
            passengerAgeOut.setText("");
            passengerCountryOut.setText("");
        }
    }//GEN-LAST:event_seat11ActionPerformed

    private void seat12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seat12ActionPerformed
        int num = 11;
        try{
            passengerNameOut.setText(planes.get(selectedPlaneObject).passengerArray[num].name);
            passengerAgeOut.setText(planes.get(selectedPlaneObject).passengerArray[num].age);
            passengerCountryOut.setText(planes.get(selectedPlaneObject).passengerArray[num].country);
        } catch (NullPointerException e){
            passengerNameOut.setText("No Passenger Booked");
            passengerAgeOut.setText("");
            passengerCountryOut.setText("");
        }
    }//GEN-LAST:event_seat12ActionPerformed

    private void seat13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seat13ActionPerformed
        int num = 12;
        try{
            passengerNameOut.setText(planes.get(selectedPlaneObject).passengerArray[num].name);
            passengerAgeOut.setText(planes.get(selectedPlaneObject).passengerArray[num].age);
            passengerCountryOut.setText(planes.get(selectedPlaneObject).passengerArray[num].country);
        } catch (NullPointerException e){
            passengerNameOut.setText("No Passenger Booked");
            passengerAgeOut.setText("");
            passengerCountryOut.setText("");
        }
    }//GEN-LAST:event_seat13ActionPerformed

    private void seat14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seat14ActionPerformed
        int num = 13;
        try{
            passengerNameOut.setText(planes.get(selectedPlaneObject).passengerArray[num].name);
            passengerAgeOut.setText(planes.get(selectedPlaneObject).passengerArray[num].age);
            passengerCountryOut.setText(planes.get(selectedPlaneObject).passengerArray[num].country);
        } catch (NullPointerException e){
            passengerNameOut.setText("No Passenger Booked");
            passengerAgeOut.setText("");
            passengerCountryOut.setText("");
        }
    }//GEN-LAST:event_seat14ActionPerformed

    private void seat15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seat15ActionPerformed
        int num = 14;
        try{
            passengerNameOut.setText(planes.get(selectedPlaneObject).passengerArray[num].name);
            passengerAgeOut.setText(planes.get(selectedPlaneObject).passengerArray[num].age);
            passengerCountryOut.setText(planes.get(selectedPlaneObject).passengerArray[num].country);
        } catch (NullPointerException e){
            passengerNameOut.setText("No Passenger Booked");
            passengerAgeOut.setText("");
            passengerCountryOut.setText("");
        }
    }//GEN-LAST:event_seat15ActionPerformed

    private void seat16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seat16ActionPerformed
        int num = 15;
        try{
            passengerNameOut.setText(planes.get(selectedPlaneObject).passengerArray[num].name);
            passengerAgeOut.setText(planes.get(selectedPlaneObject).passengerArray[num].age);
            passengerCountryOut.setText(planes.get(selectedPlaneObject).passengerArray[num].country);
        } catch (NullPointerException e){
            passengerNameOut.setText("No Passenger Booked");
            passengerAgeOut.setText("");
            passengerCountryOut.setText("");
        }
    }//GEN-LAST:event_seat16ActionPerformed

    private void seat17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seat17ActionPerformed
        int num = 16;
        try{
            passengerNameOut.setText(planes.get(selectedPlaneObject).passengerArray[num].name);
            passengerAgeOut.setText(planes.get(selectedPlaneObject).passengerArray[num].age);
            passengerCountryOut.setText(planes.get(selectedPlaneObject).passengerArray[num].country);
        } catch (NullPointerException e){
            passengerNameOut.setText("No Passenger Booked");
            passengerAgeOut.setText("");
            passengerCountryOut.setText("");
        }
    }//GEN-LAST:event_seat17ActionPerformed

    private void seat18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seat18ActionPerformed
        int num = 17;
        try{
            passengerNameOut.setText(planes.get(selectedPlaneObject).passengerArray[num].name);
            passengerAgeOut.setText(planes.get(selectedPlaneObject).passengerArray[num].age);
            passengerCountryOut.setText(planes.get(selectedPlaneObject).passengerArray[num].country);
        } catch (NullPointerException e){
            passengerNameOut.setText("No Passenger Booked");
            passengerAgeOut.setText("");
            passengerCountryOut.setText("");
        }
    }//GEN-LAST:event_seat18ActionPerformed

    private void seat19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seat19ActionPerformed
        int num = 18;
        try{
            passengerNameOut.setText(planes.get(selectedPlaneObject).passengerArray[num].name);
            passengerAgeOut.setText(planes.get(selectedPlaneObject).passengerArray[num].age);
            passengerCountryOut.setText(planes.get(selectedPlaneObject).passengerArray[num].country);
        } catch (NullPointerException e){
            passengerNameOut.setText("No Passenger Booked");
            passengerAgeOut.setText("");
            passengerCountryOut.setText("");
        }
    }//GEN-LAST:event_seat19ActionPerformed

    private void seat20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seat20ActionPerformed
        int num = 19;
        try{
            passengerNameOut.setText(planes.get(selectedPlaneObject).passengerArray[num].name);
            passengerAgeOut.setText(planes.get(selectedPlaneObject).passengerArray[num].age);
            passengerCountryOut.setText(planes.get(selectedPlaneObject).passengerArray[num].country);
        } catch (NullPointerException e){
            passengerNameOut.setText("No Passenger Booked");
            passengerAgeOut.setText("");
            passengerCountryOut.setText("");
        }
    }//GEN-LAST:event_seat20ActionPerformed
// </editor-fold> 
    
    private void returnToRadarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnToRadarActionPerformed
        CardLayout cl = (CardLayout) (homePanel.getLayout());
        cl.show(homePanel, "card1");
        
        log = log + sdf.format(new Date(System.currentTimeMillis())) + " Return to Radar Button Pressed \n";
    }//GEN-LAST:event_returnToRadarActionPerformed

    //if book flight button is pressed, display the dialog
    private void bookFlightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookFlightActionPerformed
        flightDialog.setVisible(true);
    }//GEN-LAST:event_bookFlightActionPerformed

    //if final book flight button is pressed:
    private void bookFlightDialogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookFlightDialogActionPerformed
        boolean full = false;
        
        //get flight info
        String id = IdDialog.getText();
        String depLoc = depLocDialog.getSelectedItem().toString();
        String arrLoc = arrLocDialog.getSelectedItem().toString();
        
        IdDialog.setText("");
        
        //test if the departure and arrival locations are the same, if so, change them
        if (depLoc.equals(arrLoc)){
            if(depLoc.equals("Vancouver")){
                arrLoc = "Edmonton";
            } else{
                arrLoc = "Vancouver";
            }
        }
        
        //define the ariport points
        Point Vancouver = new Point(240, 540);
        Point Edmonton = new Point(370, 510);
        Point Iqualuit = new Point(770, 270);
        Point Winnipeg = new Point(560, 600);
        Point Toronto = new Point(790, 690);
        Point Ottawa = new Point(830, 650);
        Point Halifax = new Point(990, 590);
        
        Point depPoint = new Point();
        Point arrPoint = new Point();
        
        //find the coordinates of the airports the user selected
        if (depLoc.equals("Vancouver")){
            depPoint = Vancouver;
        } else if (depLoc.equals("Edmonton")){
            depPoint = Edmonton;
        } else if (depLoc.equals("Iqualuit")){
            depPoint = Iqualuit;
        } else if (depLoc.equals("Winnipeg")){
            depPoint = Winnipeg;
        } else if (depLoc.equals("Toronto")){
            depPoint = Toronto;
        } else if (depLoc.equals("Ottawa")){
            depPoint = Ottawa;
        } else if (depLoc.equals("Halifax")){
            depPoint = Halifax;
        }
        if (arrLoc.equals("Vancouver")){
            arrPoint = Vancouver;
        } else if (arrLoc.equals("Edmonton")){
            arrPoint = Edmonton;
        } else if (arrLoc.equals("Iqualuit")){
            arrPoint = Iqualuit;
        } else if (arrLoc.equals("Winnipeg")){
            arrPoint = Winnipeg;
        } else if (arrLoc.equals("Toronto")){
            arrPoint = Toronto;
        } else if (arrLoc.equals("Ottawa")){
            arrPoint = Ottawa;
        } else if (arrLoc.equals("Halifax")){
            arrPoint = Halifax;
        }
        
        int futureSize = futurePlanes.size();
        //calculate the soonest time the plane can depart
        long soonestTime = (long)(Math.pow(2, 55)); //define a number that is surely bigger then any possible system time
        //if there are no upcoming planes, then the soonest time is the first arrival time of the current planes
        if (futureSize <= 0){
            for (int i = 0; i < planes.size(); i++){
                long time = planes.get(i).arriveTime;
                if (time < soonestTime){
                    soonestTime = time;
                }
            }
        } else if (futureSize < 10){ //if planes are upcoming
            int totalSize = futureSize + planes.size();
            long[] soonValues = new long[totalSize];
            for (int i = 0; i < 5; i++){ //add all arrive times to an array
                soonValues[i] = planes.get(i).arriveTime;
            } for (int i = 5; i < futureSize + 5; i++){
                soonValues[i] = futurePlanes.get(i - 5).arriveTime;
            }
            
            //sort the array into ascending order
            for (int i = 0; i < soonValues.length; i++){
                for (int j = i + 1; j < soonValues.length; j++){
                    if (soonValues[i] > soonValues[j]){
                        long temp = soonValues[i];
                        soonValues[i] = soonValues[j];
                        soonValues[j] = temp;
                    }
                }
            }
            
            //find the soonest time based on how many upcoming planes there are
            int position = futurePlanes.size();
            soonestTime = soonValues[position];
        } else{ //if the upcoming planes is full, display this message
            IdDialog.setText("Too Many Planes");
            full = true;
        }
        
        //find the distance of the flight and estimate the arrive time
        long disX = Math.abs(arrPoint.x - depPoint.x);
        long disY = Math.abs(arrPoint.y - depPoint.y);
        long time = 0;
        if (disX >= disY){
            long dis = (disX - disY) + disY;
            time = dis * 1000;
        } else{
            long dis = (disY - disX) + disX;
            time = dis * 1000;
        }
        long arriveTime = soonestTime + time;
        
        //declare the passenger array and seating array
        Passenger[] tempPassengerArray = new Passenger[20];
        int[] seating = new int[20];
        for (int i = 0; i < seating.length; i++){
            seating[i] = 0;
        }
        
        //if plane is not full:
        if (full == false){
            //add new plane object to array
            futurePlanes.add(new Plane(id, depPoint, soonestTime, arrPoint, arriveTime, tempPassengerArray, seating));
            flightDialog.setVisible(false); //hide the dialog
            refreshTables(); //refresh the tables
            
            log = log + sdf.format(new Date(System.currentTimeMillis())) + " Plane Successfully Booked \n"; //log the action
        }
    }//GEN-LAST:event_bookFlightDialogActionPerformed

    //if a speed button is pressed, set the correct animation speed, log the action
    private void speed1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_speed1ActionPerformed
        animationSpeed = 1;
        
        log = log + sdf.format(new Date(System.currentTimeMillis())) + " Animation Speed Changed \n";
    }//GEN-LAST:event_speed1ActionPerformed

    private void speed2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_speed2ActionPerformed
        animationSpeed = 20;
        
        log = log + sdf.format(new Date(System.currentTimeMillis())) + " Animation Speed Changed \n";
    }//GEN-LAST:event_speed2ActionPerformed

    private void speed3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_speed3ActionPerformed
        animationSpeed = 75;
        
        log = log + sdf.format(new Date(System.currentTimeMillis())) + " Animation Speed Changed \n";
    }//GEN-LAST:event_speed3ActionPerformed
    
    //This method intially generates the plane objects to fly at startup. The process is very similar to when the user books a new flight (See above for more detailed notes)
    public static void initialGeneratePlanes(){
        for (int i = 0; i < 5; i++){ //perform 5 times
            String ID = Integer.toString((int)(Math.random()*900 + 100)); //generate an ID
            int rand1 = (int)(Math.random() * 7); //generate the departure and arrival airports, ensure they are not the same
            int rand2 = (int)(Math.random() * 7);
            while (rand1 == rand2){
                rand2 = (int)(Math.random() * 7);
            }
            Point departLoc = new Point(airports[0][rand1], airports[1][rand1]);
            Point arriveLoc = new Point(airports[0][rand2], airports[1][rand2]);
            
            long disX = Math.abs(arriveLoc.x - departLoc.x); //calculate distance, estimate time of flight
            long disY = Math.abs(arriveLoc.y - departLoc.y);
            long time = 0;
            if (disX >= disY){
                long dis = (disX - disY) + disY;
                time = dis * 1000;
            } else{
                long dis = (disY - disX) + disX;
                time = dis * 1000;
            }
            
            long departTime = System.currentTimeMillis();
            long arriveTime = departTime + time + totalFastForward;
            
            Passenger[] passengerArray = new Passenger[20]; //declare arrays
            int[] seatingBooked = new int[20];
            for (int k = 0; k < seatingBooked.length; k++){
                seatingBooked[k] = 0;
            }
            for (int j = 0; j < 20; j++){ //generate passengers for the plane (about 66% full)
                int rand = (int)(Math.random() * 3);
                if ((rand == 0) || (rand == 1)){
                    passengerArray[j] = generatePassenger();
                    seatingBooked[j] = 1;
                }
            }
            
            planes.add(new Plane(ID, departLoc, departTime, arriveLoc, arriveTime, passengerArray, seatingBooked)); //add plane object
        }
        log = log + sdf.format(new Date(System.currentTimeMillis())) + " Initial Planes Generated \n"; //log the action
    }
    
    //This method generates a new plane. It is called when a new plane is needed, button the user didn't enter one. Again, it is a similar process to above, except it returns a plane object.
    public static Plane generateFuturePlane(){
        String ID = Integer.toString((int)(Math.random()*900 + 100)); //generate ID and airports
        int rand1 = (int)(Math.random() * 7);
        int rand2 = (int)(Math.random() * 7);
        while (rand1 == rand2){
            rand2 = (int)(Math.random() * 7);
        }
        Point departLoc = new Point(airports[0][rand1], airports[1][rand1]);
        Point arriveLoc = new Point(airports[0][rand2], airports[1][rand2]);
        
        long disX = Math.abs(arriveLoc.x - departLoc.x); //find distance, estimate time
        long disY = Math.abs(arriveLoc.y - departLoc.y);
        long time = 0;
        if (disX >= disY){
            long dis = (disX - disY) + disY;
            time = dis * 1000;
        } else{
            long dis = (disY - disX) + disX;
            time = dis * 1000;
        }
        
        long departTime = System.currentTimeMillis();
        long arriveTime = departTime + time + totalFastForward;

        Passenger[] passengerArray = new Passenger[20]; //declare arrays
        int[] seatingBooked = new int[20];
        for (int k = 0; k < seatingBooked.length; k++){
            seatingBooked[k] = 0;
        }
        
        for (int j = 0; j < 20; j++){ //generate passengers
            int rand = (int)(Math.random() * 3);
            if ((rand == 0) || (rand == 1)){
                passengerArray[j] = generatePassenger();
                seatingBooked[j] = 1;
            }
        }

        log = log + sdf.format(new Date(System.currentTimeMillis())) + " Plane Generated \n"; //log action
        return (new Plane(ID, departLoc, departTime, arriveLoc, arriveTime, passengerArray, seatingBooked)); //return new plane object
    }
    
    //This method generates a passenger for a plane
    public static Passenger generatePassenger(){
        //declare arrays for possible names and countries
        ArrayList <String> firstNames = new ArrayList<String>(Arrays.asList("Branden", "John", "Jane", "Lucas", "Morgan", "Tera", "Alban", "Rosa", "Clayton", "Brent", "Raleigh", "Dwain"));
        ArrayList <String> lastNames = new ArrayList<String>(Arrays.asList("Lisk", "Doe", "Underhill", "Shine", "Thorley", "Winston", "King", "Janson", "Payton", "Low", "Seward"));
        ArrayList <String> countries = new ArrayList<String>(Arrays.asList("Canada", "United States", "Mexico"));
        //randomly choose a first and last name, and a country
        String name = firstNames.get((int)(Math.random() * firstNames.size())) + " " + lastNames.get((int)(Math.random() * lastNames.size()));
        String age = Integer.toString((int)(Math.random() * 90 + 10));
        String country = countries.get((int)(Math.random() * countries.size()));
        
        return (new Passenger(name, age, country));
    }
    
    //This method initially sets the position of each plane icon, based on their depart location
    public void initialSetPosition(){
        p1.setLocation(planes.get(0).departLoc);
        p2.setLocation(planes.get(1).departLoc);
        p3.setLocation(planes.get(2).departLoc);
        p4.setLocation(planes.get(3).departLoc);
        p5.setLocation(planes.get(4).departLoc);
    }
    
    //This method refreshs all tables, adding the new data
    public static void refreshTables(){
        for (int i = 0; i < planes.size(); i++){ //search through current planes array
            currentFlightsTable.setValueAt(planes.get(i).ID, i, 0); //get all information from each object and set the tables to this data
            
            currentFlightsBooking.setValueAt(planes.get(i).ID, i, 0);
            currentFlightsBooking.setValueAt(planes.get(i).getActualDepartLocation(), i, 1);
            currentFlightsBooking.setValueAt(sdf.format(new Date(planes.get(i).departTime)), i, 2);
            currentFlightsBooking.setValueAt(planes.get(i).getActualArrivalLocation(), i, 3);
            currentFlightsBooking.setValueAt(sdf.format(new Date(planes.get(i).arriveTime)), i, 4);
        }
        
        int max = dtm.getRowCount(); //set row count to 0 for each refresh
        for (int i = 0; i < max; i++){
            dtm.removeRow(0);
        }
        
        for (int i = 0; i < futurePlanes.size(); i++){ //search through the future planes array
            dtm.addRow(new String[5]); //add a new row
            futureFlightsBooking.setValueAt(futurePlanes.get(i).ID, i, 0); //get all info from array and display in table
            futureFlightsBooking.setValueAt(futurePlanes.get(i).getActualDepartLocation(), i, 1);
            futureFlightsBooking.setValueAt(sdf.format(new Date(futurePlanes.get(i).departTime)), i, 2);
            futureFlightsBooking.setValueAt(futurePlanes.get(i).getActualArrivalLocation(), i, 3);
            futureFlightsBooking.setValueAt(sdf.format(new Date(futurePlanes.get(i).arriveTime)), i, 4);
        }
    }
    
    //Main method:
    public static void main(String args[]) {
        //add fist info to log file
        long time = System.currentTimeMillis();
        SimpleDateFormat sdf2 = new SimpleDateFormat("dd:MM:yyyy HH:mm:ss");
        Date date = new Date(time);
        String output = sdf2.format(date);
        log = log + "Aviation Systems v1.0 by Branden Lisk \n" + output + "\n";
        initialGeneratePlanes(); //generate the first planes
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Flight.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Flight.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Flight.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Flight.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Flight().setVisible(true);
            }
        });
        
        //When user closes the program
        Runtime.getRuntime().addShutdownHook(new Thread(new Runnable() {
            public void run(){
                try{ //create the log file, copy the string data, and close it
                    log = log + sdf.format(new Date(System.currentTimeMillis())) + " Program Terminated \n";
                    
                    OutputStream fout = new FileOutputStream("LogFile");
                    OutputStream bout = new BufferedOutputStream(fout);
                    OutputStreamWriter out = new OutputStreamWriter(bout);
                    
                    out.write(log);
                    out.flush();
                    out.close();
                    
                } catch (FileNotFoundException ex) {
                    //
                } catch (IOException ex) {
                    //
                }
                
            }
        }, "Shutdown-thread"));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField IdDialog;
    private javax.swing.JLabel ageLabel;
    private javax.swing.JComboBox<String> arrLocDialog;
    private javax.swing.JButton backToRadar;
    private javax.swing.JButton bookFlight;
    private javax.swing.JButton bookFlightDialog;
    private javax.swing.JButton bookPassenger;
    private javax.swing.JButton bookPassengerButton;
    public static javax.swing.JLabel clockLabel;
    private javax.swing.JLabel countryLabel;
    private javax.swing.JPanel currentFlights;
    private static javax.swing.JTable currentFlightsBooking;
    private static javax.swing.JTable currentFlightsTable;
    private javax.swing.JButton currentPlane1;
    private javax.swing.JButton currentPlane2;
    private javax.swing.JButton currentPlane3;
    private javax.swing.JButton currentPlane4;
    private javax.swing.JButton currentPlane5;
    private javax.swing.JLabel currentTitle;
    private javax.swing.JComboBox<String> depLocDialog;
    private javax.swing.JLabel dialogTitle;
    private javax.swing.JDialog flightDialog;
    private static javax.swing.JTable futureFlightsBooking;
    private javax.swing.JLabel homeInfo;
    private static javax.swing.JPanel homePanel;
    private javax.swing.JLabel idLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel labelAge;
    private javax.swing.JLabel labelCountry;
    private javax.swing.JLabel labelName;
    private javax.swing.JButton loadButton;
    private javax.swing.JLabel logo;
    private javax.swing.JPanel manage;
    private javax.swing.JButton manageButton;
    private javax.swing.JLabel mapPicture;
    private javax.swing.JLabel nameLabel;
    private static javax.swing.JPanel openingScreen;
    public static javax.swing.JLabel p1;
    public static javax.swing.JLabel p2;
    public static javax.swing.JLabel p3;
    public static javax.swing.JLabel p4;
    public static javax.swing.JLabel p5;
    private javax.swing.JTextField passengerAgeIn;
    private javax.swing.JTextField passengerAgeOut;
    private javax.swing.JTextField passengerCountryIn;
    private javax.swing.JTextField passengerCountryOut;
    private javax.swing.JDialog passengerDialog;
    private javax.swing.JPanel passengerDisplay;
    private javax.swing.JTextField passengerIdIn;
    private javax.swing.JPanel passengerInfo;
    private javax.swing.JTextField passengerNameIn;
    private javax.swing.JTextField passengerNameOut;
    private javax.swing.JLabel passengerTitle;
    private javax.swing.JPanel planeGraphic;
    private javax.swing.JPanel planeInfo;
    private javax.swing.JLabel planeSeatsImage;
    private javax.swing.JButton returnToRadar;
    private static javax.swing.JButton seat1;
    private static javax.swing.JButton seat10;
    private static javax.swing.JButton seat11;
    private static javax.swing.JButton seat12;
    private static javax.swing.JButton seat13;
    private static javax.swing.JButton seat14;
    private static javax.swing.JButton seat15;
    private static javax.swing.JButton seat16;
    private static javax.swing.JButton seat17;
    private static javax.swing.JButton seat18;
    private static javax.swing.JButton seat19;
    private static javax.swing.JButton seat2;
    private static javax.swing.JButton seat20;
    private static javax.swing.JButton seat3;
    private static javax.swing.JButton seat4;
    private static javax.swing.JButton seat5;
    private static javax.swing.JButton seat6;
    private static javax.swing.JButton seat7;
    private static javax.swing.JButton seat8;
    private static javax.swing.JButton seat9;
    private javax.swing.JPanel seatRow1;
    private javax.swing.JPanel seatRow2;
    private javax.swing.JButton speed1;
    private javax.swing.JButton speed2;
    private javax.swing.JButton speed3;
    private javax.swing.JPanel speedPanel;
    private javax.swing.JLabel titl;
    private javax.swing.JLabel title;
    private javax.swing.JLabel wallpaper;
    private javax.swing.JPanel welcome;
    // End of variables declaration//GEN-END:variables
}